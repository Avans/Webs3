<div class="col-sm-6 col-sm-offset-4 docs">

	<h1><span class="fa fa-sign-in"></span>Docs</h1>

	<section class="" id="APIKEY" data-spy="APIKEY" data-target="#APIKEY">

		<h3>De API Key</h3>


		<p>
			Het is alleen mogelijk om data van de server op te halen door aan elk request een API key toe te voegen.
			Deze key vertelt de server iets over wie je bent.
			Je kunt deze key aanvragen op deze website door je zelf te registreren.
			Op de <a href="/profile">profile</a> pagina kun je deze key terug vinden.
		</p>

		<p>
			Als je een "API key" hebt ontvangen kun je informatie op gaan vragen aan de server.
			Klik bijvoorbeeld maar eens op de onderstaande link.
		</p>

		{{#if user }}
			<p>
				<a href="/users/me/games?token={{user.token}}" target="blank">/users/me/games?token={{user.token}}</a>
			</p>
		{{else}}
		<p class="bg-warning">De link is niet zichtbaar want je bent niet ingelogd</p>
		{{/if}}
		<p>Door achter de de <b>route</b> een parameter met de naam <b>token</b> te zetten kun je de API key meegeven.</p>

		<pre>/users/me/games?token=&lt&lttoken here&gt&gt</pre>

		<p>Vergeet deze token niet mee te geven anders krijg je een error!</p>




	</section>
	<section class="" id="spelregels" data-spy="spelregels" data-target="#spelregels">

		<h3>Spelregels</h3>

		<p>
			Zeeslag is een spel met maar een basisset aan spelregels.
			Het model wat we gaan gebruiken om informatie op te halen en op te slaan is ook niet heel er ingewikkeld.
		</p>

		<p>
			Het doel van zeeslag is het laten <b>zinken</b> van alle schepen van de tegenstander. De schepen bevinden zich op een Grid van <b>10x10</b> vakjes. Bij het opzetten (setup) van het spel moeten de beide spelers de schepen op het bord plaatsen. In de digitale vorm heeft elk schip een start vakje, lengte en oriÃ«ntatie (verticaal of horizontaal).
		</p>

		<p>
			Als beide spelers klaar zijn kan het spel beginnen. (started) Elke speler kan een vakje van de tegenstander <b>beschieten</b>. De tegenstander moet dan aangeven of het een <b>BOEM</b> of een <b>PLONS</b> is. Beiden spelers kunnen bijhouden welke schoten ze hebben uitgevoerd en of het schot raak was of niet.
		</p>

		<p>
			Als een speler alle schepen van de tegenstander heeft laten zinken wint hij het spel!
		</p>

		<p>
			De specifieke implementatie van elk onderdeel van het spel vind je onder het onderdeel <b>Routes</b>.
		</p>

		<h4>De flow van het spel</h4>

		<ol>
			<li>Speler A vraagt een game aan</li>
			<li>Speler A komt in een game met de status <b>queue</b></li>
			<li>Speler B vraagt een game aan</li>
			<li>Speler B komt in de game van speler A met de status <b>setup</b></li>
			<li>Speler A submit een gameboard (lijst van schepen)</li>
			<li>De game blijft in de status <b>setup</b></li>
			<li>Speler B submit een gameboard (lijst van schepen)</li>
			<li>De game heeft nu de status <b>started</b></li>
			<li>Speler A submit een schot op het gameboard van speler B</li>
			<li>Speler B submit een schot op het gameboard van speler A</li>
			<li>De game kan nu de status <b>done</b> hebben. Zo niet, herhaal stap 9 en 10</li>
		</ol>

	</section>
	<section class="" id="userinfo" data-spy="userinfo" data-target="#userinfo">

		<h3>/users/me/info</h3>

		<p class="bg-success">GET</p>

		<p>Via deze route kun je de informatie van de user ophalen:
			<ul>
				<li>Unique ID van de user</li>
				<li>De naam van de user</li>
			</ul>
		</p>

		<h4>Return value</h4>

<pre>
{
	"_id":"rechtsonder@gmail.com",
	"name":"Rechts onder"
}</pre>

	</section>
	<section class="" id="megames" data-spy="megames" data-target="#megames">

		<h3>/users/me/games</h3>

		<p class="bg-success">GET</p>

		<p>Via deze route krijg je een collectie van games waarin jij mee speelt. Elke game heeft de volgende eigenschappen:
			<ul>
				<li>Unique ID van de game</li>
				<li>Status van de game</li>
				<li>Unique ID van de tegenstander</li>
				<li>De naam van de tegenstander</li>
				<li>Eventueel het ID van de winnaar</li>
			</ul>
		</p>

		<h4>Return value</h4>

<pre>
[
  {
  	"_id":21,
	"status":"setup",
	"enemyId":"55268f3aa43c82a4244bb00c",
	"enemyName":"rechtsonder@gmail.com"
  },
  {"
	_id":19,
	"status":"started",
	"enemyId":"55268f3aa43c82a4244bb00a",
	"enemyName":"rechtsboven@gmail.com"
  },
  {
  	"_id":22,
	"status":"started",
	"enemyId":"55268f3aa43c82a4244bb00a",
	"enemyName":"rechtsboven@gmail.com"
  },
  {
  	"_id":23,
	"status":"done",
  	"enemyId":"55268f3aa43c82a4244bb00a",
  	"enemyName":"rechtsboven@gmail.com",
	"winner": "55268f3aa43c82a4244bb00a"
  }
]</pre>

	</section>
	<section class="" id="megamesdelete" data-spy="megamesdelete" data-target="#megamesdelete">

		<h3>/users/me/games</h3>

		<p class="bg-warning">DELETE</p>

		<p>
			Via deze route is het mogelijk alle games waar je deel aan neemt te verwijderen. De request hoeft verder geen body te hebben.
		</p>

		<h4>Return value</h4>
<pre>
  {
  	"msg": "Games removed succesfully"
  }</pre>

	</section>
	<section class="" id="newGame" data-spy="newGame" data-target="#newGame">

		<h3>/games</h3>

		<p class="bg-success">GET</p>

		<p>Via deze route kun je een nieuwe game opvragen met als tegenstander een andere student.</p>
		<p>Als er al een game op de server staat met maar 1 speler, dan zul je deze game joinen, en zal de status naar de game veranderen naar <b>setup</b>. Als er geen game meer open staat, zal de server een nieuwe game voor je aanmaken en krijgt deze de status <b>queue</b>.
		<p>Indien je al een game tegen een andere student hebt aangevraagd, zal de server een error terug geven</p>

		<h4>Return value</h4>

		<pre>
{
    "_id": 9,
    "status": "setup | queue",
    "player1": "<player1Id>",
    "player2": "<player2Id> | undefined",
    "__v": 0,
    "isAI": false
}
</pre>


	</section>
	<section class="" id="newGameAI" data-spy="newGameAI" data-target="#newGameAI">

		<h3>/games/AI</h3>

		<p class="bg-success">GET</p>

		<p>Via deze route kun je een nieuwe game opvragen met als tegenstander een computer. </p>

		<p>De game zal na het aanvragen meteen de status 'setup' krijgen. </p>

		<h4>Return value</h4>
		<pre>
{
    "__v": 0,
    "_id": 10,
    "status": "setup",
    "player1": "<yourId>",
    "player2": "<computerId>",
    "isAI": true
}
</pre>

	</section>
	<section class="" id="theGame" data-spy="theGame" data-target="#theGame">

		<h3>/games/:id</h3>

		<p class="bg-success">GET</p>

		<p>
			Elke gebruiker heeft een collectie van <b>games</b>. Voor elke game kun je alle informatie opvragen doormiddel van het Id. Het is alleen mogelijk gegevens op te halen van een game waar je zelf aan deel neemt.
		</p>

		<p>
		Om bijvoorbeeld de informatie van een game met het Id '7' op te halen, gebruik je de volgende request:
		</p>


		{{#if user }}
			<p>
				<a href="/games/7?token={{user.token}}" target="blank">/games/7?token={{user.token}}</a>
			</p>
		{{else}}
		<p class="bg-warning">De link is niet zichtbaar want je niet bent ingelogd</p>
		{{/if}}

		<p>Elke game heeft de volgende eigenschappen
			<ul>
				<li>Een status ("queue" | "setup" | "started" | "done"</li>
				<li>Your Turn ("true" | "false")</li>
				<li>Enemy Id en enemy Name</li>
				<li>My gameboard en enemy gameboard
					<ul>
						<li>MyGameboard heeft een lijst van schepen, en shots</li>
						<li>EnemyGameboard heeft alleen een lijst van shots</li>
					</ul>
				</li>
			</ul>
		</p>

		<h4>Return value</h4>

		<pre>
{
  "_id":23,
  "status":"started",
  "yourTurn":false,
  "enemyId":"55268f3aa43c82a4244bb00a",
  "enemyName":"rechtsboven@gmail.com",
  "myGameboard":{
	"_id":20,
	"__v":3,
	"ships":[{
	   "length":2,
	   "isVertical":true,
	   "_id":"554239de10da4dc04faacdaf",
	   "hits":[{"x":"i","y":1,"_id":"55423a8710da4dc04faacdba"}],
	   "startCell":{"x":"i","y":1}
	 },
	 {
	   "length":3,"isVertical":true,
	   "_id":"554239de10da4dc04faacdae",
	   "hits":[],
	   "startCell":{"x":"h","y":1}
	 },
	..etc
  },
  enemyGameboard":{"
    _id":21,"
    __v":3,
    "shots":[
    	{"x":"c","y":2,"_id":"55423a7610da4dc04faacdb4"},
    	{"x":"e","y":2,"_id":"55423a7f10da4dc04faacdb6"},
    	{"x":"d","y":2,"isHit":true,"_id":"55423a8510da4dc04faacdb9"}
    ]
  }
}</pre>


	</section>
	<section class="" id="ships" data-spy="ships" data-target="#ships">

		<h3>/ships</h3>


		<p class="bg-success">GET</p>

		<p>
		Haal een lijst op van schepen die je op een gameboard kan plaatsen.
		De lijst bevat 5 schepen (2, 3 , 3, 4, 5) waarmee je je gameboard kunt vullen.
		Na het vullen van het gameboard kun je dit 'posten' naar de server.
		</p>

		<h4>Return value</h4>

		<pre>
[
    {
        "_id": 1,
        "length": 3,
        "name": "Destoryer",
        "__v": 0
    },
    {
        "_id": 0,
        "length": 2,
        "name": "Patrol boat",
        "__v": 0
    },
    {
        "_id": 2,
        "length": 3,
        "name": "Submarine",
        "__v": 0
    },
    {
        "_id": 3,
        "length": 4,
        "name": "Battleship",
        "__v": 0
    },
    {
        "_id": 4,
        "length": 5,
        "name": "Aircraft carrier",
        "__v": 0
    }
]
</pre>



	</section>

	<section class="" id="gameboards" data-spy="gameboards" data-target="#gameboards">

		<h3>/games/:id/gameboards</h3>

		<p class="bg-danger">POST</p>

		<p>
			in de fase 'setup' moet je een gameboard naar de server posten. Indien je de eerste speler bent die een gameboard post, zal de fase van de game in 'setup' blijven. Indien beide spelers een gameboard hebben gepost, zal de status van de game veranderen naar 'started'. (Als je tegen een AI speelt veranderd de status altijd meteen naar started).
		</p>
		<p>
			Het gameboard moet voldoen aan logische eisen zoals:
			<ul>
				<li>Het bord moet precies 5 schepen bevatten</li>
				<li>Elk schip moet binnen het bord passen</li>
				<li>De schepen moeten de juiste lengte hebben</li>
			</ul>
		</p>

		<p class="bg-info">
			<b>Tip</b> - Gebruik de result set van de resource <b>/ships</b> om een lijst van schepen te maken.
			Voeg per 'ship' de volgende properties toe:
			<ul>
				<li>Een JSON object met de naam startCell <i>(bijv: {x: 'a', y: 6})</i></li>
				<li>Een boolean met de naam isVertical</li>
			</ul>
		</p>

		<p>Een gameboard heeft de volgende eigenschappen
			<ul>
				<li>Een Lijst van schepen</li>
			</ul>
		</p>

		<h4>Post object</h4>

		<p>Gebruik <i>geen</i> JSON.stringify op dit object als je het via AJAX verstuurd.</p>

		<pre>
{ "ships": [{
	"_id": 1,
	"length": 3,
	"name": "Destoryer",
	"startCell" : { "x": "a", "y": 1 },
	"isVertical" : false,
	"__v": 0
    },
    {
	"_id": 0,
	"length": 2,
	"name": "Patrol boat",
	"startCell" : { "x": "a", "y": 2 },
	"isVertical" : false,
	"__v": 0
    },
    {
	"_id": 2,
	"length": 3,
	"name": "Submarine",
	"startCell" : { "x": "a", "y": 3 },
	"isVertical" : false,
	"__v": 0
    },
    {
	"_id": 3,
	"length": 4,
	"name": "Battleship",
	"startCell" : { "x": "a", "y": 4 },
	"isVertical" : false,
	"__v": 0
    },
    {
	 "_id": 4,
	 "length": 5,
	 "name": "Aircraft carrier",
	 "startCell" : { "x": "a", "y": 5 },
	 "isVertical" : false,
	 "__v": 0
    }]
}
</pre>

		<h4>Return value</h4>

<pre>
{
    "msg": "success",
    "status": "setup | started"
}
</pre>


	</section>
	<section class="" id="shots" data-spy="shots" data-target="#shots">

		<h3>/games/:gameId/shots</h3>


		<p class="bg-danger">POST</p>

		<p>
			Indien een game de status 'started' heeft, is het mogelijk om echt te gaan spelen.
			Elke speler kan omstebeurt een schot toevoegen aan het gameboard van de tegenstander.
			Dit doet hij door op de route /games/:gameId/shots een schot te posten. De server zal de schoten bijhouden op het gameboard van de betrokken partij. Een schot op je enemey, voegt een schot toe aan het gameboard van je de enemy.
		</p>

		<p>
			Voor het posten van een schot gelden de volgende regels:
			<ul>
				<li>Een speler mag alleen een schot posten als het zijn beurt is.</li>
				<li>Een schot moet binnen het bord vallen</li>
			</ul>
		</p>

		<p>
			De return value van deze resource is anders dan de meeste resources.
			Eventuele errors daargelaten, is het mogelijk om 3 responses te krijgen van de server:
			<ul>
				<li><b>BOOM</b>: Het schot was raak</li>
				<li><b>SPLASH</b>: Het schot was mis</li>
				<li><b>FAIL</b>: Het schot was al eerder uitgevoerd op de aangegeven x en y</li>
			</ul>
		</p>

		<p>
			Indien een schot raak is, zal de server naast een shot aan het gameboard, ook een hit aan het schip toevoegen.
			Hierdoor is het makkelijk te zien of een van je schepen al geraakt is, zonder door alle schoten heen te lopen.
			Daarnaast krijgt elk schot een property 'isHit' met de waarde 'true'. Hierdoor kun je later terug zien welke schoten op het vijandelijk bord raak waren.
		</p>


		<h4>Post object</h4>

		<pre>{"x": "a", "y": 1 }</pre>

		<h4>Return value</h4>
		<pre>BOOM | SPLASH | FAIL | WINNER</pre>

	</section>
	<section class="" id="sockets" data-spy="sockets" data-target="#sockets">

		<h3>Sockets</h3>

		<p class="bg-info">Socket connection</p>

		<p>Het is mogelijk om een connectie met een websocket op de zeeslag server te maken.
		Via deze socket worden er berichten verstuurd vanuit de server. Indien een van je tegenstanders een actie uitvoert via de server, zal de server een bericht sturen
		welke game geupdate is. </p>

		<p>Op deze manier kun je zien of een andere speler een gameboard upload of een shot toevoegt aan een game. </p>

		<p>Om deze functionaliteit te implementeren moet je de volgende handelingen uitvoeren:
			<ol>
				<li>Een socket.io Javascript file toevoegen</li>
				<li>Verbinding maken met de socket op de webserver</li>
				<li>Luisteren naar de berichtent die de server verstuurd</li>
			</ol>
		</p>

		<br/>

		<hr />

		<h4>De javascript file toevoegen</h4>

		<p>Op de zeeslag server bevind zich een file genaamd <b>socket.io.js</b>.
			Deze file is op de volgende manier te benaderen
		</p>

		<pre>&ltscript src="https://zeeslagavans.herokuapp.com/socket.io/socket.io.js"&gt&lt/script&gt</pre>
		<br/>

		<h4>Verbinding maken met de socket</h4>

		<p>Als de file is toevegoed kun je een <b>socket</b> object definiÃ«ren. </p>

		<pre>
var server = 'https://zeeslagavans.herokuapp.com/';
var options = {
  query: "token=" +  &lt&ltTOKEN&gt&gt,
};

var socket = io.connect(server, options);
</pre>
		<br/>

		<h4>Luisteren naar berichten</h4>

		<h5>Update</h5>

		<p>Indien de server ziet dat een game waar jij onderdeel van bent een update heeft, zal hij een berichtje versturen.
			Als parameter krijg je het ID en de nieuwe Status in een JSON object van de game die veranderd is.
		</p>

		<pre>
socket.on('update', function(update){
  var gameId = update.gameId // Bijvoorbeeld 10
  var status = update.status // Bijvoorbeeld queue
});</pre>
		<br/>

		<h5>Shot</h5>
		<p>Het is ook mogelijk om te luisteren naar schoten van spelers, zowel je eigen
			en die van je tegenstander zullen via dit event naar jou worden gestuurd.
			Het JSON object dat je van dit event terug krijgt heeft 4 properties namelijk: gameId, user, field & result.
		</p>

		<pre>
socket.on('shot', function(shot){
  var gameId = shot.gameId // Bijvoorbeeld 10
  var user = shot.user // Bijvoorbeeld ssmulder@avans.nl
  var field = shot.field // Dit is ook weer een JSON object die de properties x en y heeft
  var result = shot.result // BOOM | SPLASH | FAIL | WINNER
});</pre>
		<br/>

		<h5>Turn</h5>
		<p>Ook is het mogelijk om te luisteren naar berichten van beurt veranderingen.
			Dit bericht zal jouw de gameId en de email van de nieuwe speler geven.
		</p>

		<pre>
socket.on('turn', function(turn){
  var gameId = shot.gameId // Bijvoorbeeld 10
  var turn = shot.turn // Bijvoorbeeld ssmulder@avans.nl
});</pre>

	</section>

</div>

<div class="col-sm-2 fixed">


   <ul class="nav nav-list">
   		<li>Getting started
   			<ul class="nav nav-list">
   				<li><a href="#APIKEY">De API key</a></li>
   				<li><a href="#spelregels">De spelregels</a></li>
   			</ul>
   		</li>
   		<li>Routes
   			<ul class="nav nav-list">
   				<li><a href="#userinfo">/users/me/info</a></li>
   				<li><a href="#megames">/users/me/games</a></li>
   				<li><a href="#megamesdelete">/users/me/games</a></li>
   				<li><a href="#newGame">/games</a></li>
   				<li><a href="#newGameAI">/games/AI</a></li>
   				<li><a href="#theGame">/games/:id</a></li>
   				<li><a href="#ships">/ships</a></li>
   				<li><a href="#gameboards">/games/:id/gameboards</a></li>
   				<li><a href="#shots">/games/:id/shots</a></li>
   			</ul>
   		</li>
   		<li>Sockets
   			<ul class="nav nav-list">
   				<li><a href="#sockets">Listening to a socket</a></li>
   			</ul>
   		</li>


    </ul>
</div>
